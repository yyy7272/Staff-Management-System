# Test Company Access Control Implementation

### Test 1: Register with allowed company email (should succeed)
POST http://localhost:5000/api/auth/register
Content-Type: application/json

{
  "username": "john.doe",
  "email": "john.doe@company.com",
  "password": "SecurePass123!",
  "firstName": "John",
  "lastName": "Doe"
}

### Test 2: Register with non-allowed company email (should fail)
POST http://localhost:5000/api/auth/register
Content-Type: application/json

{
  "username": "external.user",
  "email": "external.user@gmail.com",
  "password": "SecurePass123!",
  "firstName": "External",
  "lastName": "User"
}

### Test 3: Register with subdomain of allowed company (should succeed if wildcard enabled)
POST http://localhost:5000/api/auth/register
Content-Type: application/json

{
  "username": "jane.smith",
  "email": "jane.smith@hr.company.com",
  "password": "SecurePass123!",
  "firstName": "Jane",
  "lastName": "Smith"
}

### Test 4: Login with company user (should work)
POST http://localhost:5000/api/auth/login
Content-Type: application/json

{
  "username": "john.doe",
  "password": "SecurePass123!"
}

### Test 5: Access protected endpoint with company user token
GET http://localhost:5000/api/employee
Authorization: Bearer {{auth_token}}

### Notes:
# 1. Update the port number (5000) to match your actual API port
# 2. Replace {{auth_token}} with the actual JWT token from login response
# 3. The allowed domains are configured in appsettings.json:
#    - company.com
#    - yourcompany.org  
#    - corp.company.com
# 4. Wildcard support is enabled, so *.company.com should work